TODO:

-Write a script to get the genre id of each genre. Put each genre, id pair
in a csv file called "genres.csv"
-In sputnik.py, read from this csv file to generate a mapping from genre to id
-

------

Deployment: http://flask.pocoo.org/docs/0.12/deploying/
http://stackoverflow.com/questions/12269537/safe-to-deploy-flask-frameworks-webserver-in-a-production-environment

------

API endpoints:

1. /artist/<artist id>

2. /chart
optional params:
genre
year
limit

3. /album/<album id>
To get the album from just the album id, scrape the following url: http://www.sputnikmusic/album/<album id>/a
Return:
-Album art
-Average rating
-Number of ratings
-Rating distribution
-Reviews (?) (maybe make this a separate endpoint)

4. /review/<review id>
To get the review from just the review id, scrape the following url: http://www.sputnikmusic.com/review/<review id>/a/
Return:
-score
-author
-comments (author and text)

5. /user/<user name>
Return (just the numbers):
-reviews
-ratings
-approval
-soundoff
-join date
-objectivity
-last active
-forum posts
-review comments
-avg rating
-rating variance
-profile pic url

6. /user/<user name>/ratings
Return:
-ratings (album name, rating)

7. /user/<user name>/reviews
Return:
-reviews (review ID, album name, rating, comments)
